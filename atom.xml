<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白衣秀才</title>
  <subtitle>青春就是疯狂的奔跑，然后华丽的跌倒，站起来，再跑……</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://penglei.top/"/>
  <updated>2017-01-07T05:28:45.011Z</updated>
  <id>http://penglei.top/</id>
  
  <author>
    <name>白衣秀才</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo+Github搭建个人博客</title>
    <link href="http://penglei.top/2017/01/07/github-nodejs-hexo-install/"/>
    <id>http://penglei.top/2017/01/07/github-nodejs-hexo-install/</id>
    <published>2017-01-07T03:06:45.000Z</published>
    <updated>2017-01-07T05:28:45.011Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&ensp;&ensp;GitHub 是一个开源项目的托管网站，相信很多人都听过。在上面有很多高质量的项目代码，我们也可以把自己的项目代码托管到GitHub，与朋友们共享交流。GitHub Pages 是Github为大家提供的一项服务，不仅能为托管的项目建立主页，还可以为我们建立个人博客。下面我就介绍个人博客是如何建立的。<br>在使用GitHub Pages建立个人博客前，我们象征性地了解一下GitHub Pages建立的页面有哪些优点：</p>
<ul>
<li>极简的配置，轻量级系统，无需数据库  </li>
<li>使用标记语言，如Markdown  </li>
<li>使用GitHub托管服务，免费300MB空间  </li>
<li>可以绑定自己的域名  </li>
<li>新版的GitHub Pages还支持CDN服务，提升访问速度  </li>
</ul>
<p>总体来说，GitHub Pages搭建的博客使用起来是非常方便的。配置好了之后，只需要使用例如Markdown编写自己的博文，扔到指定的文件夹里即可发布了。完全不需要管理网站相关的事务，例如数据库、安全性等问题。<br>开始正题，下面的操作步骤参考自Github Pages的主页，再结合我的实际操作介绍各个步骤，并说一下可能遇到的问题和解决办法。<br>首先说明下面是以Window 10环境为例的。另外我采用的是Git Bash终端来操作，这在任何环境下都是一样的。</p>
<hr>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在开始一切之前，你必须已经：</p>
<ul>
<li>有一个github账号，没有的话去注册一个；</li>
<li>安装了<a href="http://pan.baidu.com/s/1kU4FPzD" target="_blank" rel="external">node.js</a>(国内下载比较慢 需要的可以从我<a href="http://pan.baidu.com/s/1kU4FPzD" target="_blank" rel="external">百度云</a>下载)、npm，并了解相关基础知识；</li>
<li>安装了git for windows（或者其它git客户端）  </li>
<li><p>本文所使用的环境：</p>
<pre><code>Windows10
[node.js@6.2.0](http://pan.baidu.com/s/1kU4FPzD)  
hexo@3.2.2
</code></pre></li>
</ul>
<hr>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>下载<a href="http://pan.baidu.com/s/1kU4FPzD" target="_blank" rel="external">node.js</a> 安装文件，点击安装，不用你做任何操作，直接下一步即可安装完成。</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在电脑的任意一个盘（位置自选）建一个文件夹，比如说的我的文件取名为Hexo.打开此文件夹，按住电脑的<code>shift</code>键，右击鼠标，选择<code>在此处打开命令窗口</code>(或者打开电脑的dos窗口，直接切换目录到Hexo文件夹)<br>在命令窗口中输入：</p>
<pre><code>$ npm install -g hexo-cli  //安装hexo
</code></pre><p>然后输入命令hexo -v输入hexo的版本号即为安装成功。</p>
<h3 id="创建一个新仓库"><a href="#创建一个新仓库" class="headerlink" title="创建一个新仓库"></a>创建一个新仓库</h3><p>新建一个名为你的<code>github用户名.github.io</code>的仓库，比如说，如果你的github用户名是whitescholars(这个是我的用户名)，那么你就新建<a href="https://whitescholars.github.io" target="_blank" rel="external">whitescholars.github.io</a>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是<br><a href="https://whitescholars.github.io" target="_blank" rel="external">https://whitescholars.github.io</a> 了，是不是很方便？</p>
<p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库，所以访问的地址也是唯一的，方便github服务器管理。</p>
<h3 id="设置仓库的参数"><a href="#设置仓库的参数" class="headerlink" title="设置仓库的参数"></a>设置仓库的参数</h3><p>相信大多数人都知道，要想使用git命令来和github进行提交部署等操作，需要进行一些配置，大概就是下面一些命令，如不明白请自行搜索.  </p>
<ol>
<li>安装<a href="https://git-for-windows.github.io/" target="_blank" rel="external">git for windows  </a>  </li>
<li><p>右键鼠标选择<code>git Base here</code>,输入如下命令：  </p>
<p> git config –global user.email xxx@qq.com<br> git config –global user.name xxx<br> ssh-keygen -t rsa -C xxx@qq.com(邮箱地址)  // 生成ssh</p>
</li>
</ol>
<p><strong>注：email和name分别为注册github时的邮箱和用户名，生成ssh时会提示让你选择存储地址，可直接按enter下一步存储为默认地址。</strong></p>
<p>找到.ssh文件夹，找到id_rsa.pub文件打开复制SSH<br><img src="http://cgcyg.img48.wal8.com/img48/564414_20170102112604/148376247778.png" alt=""></p>
<p>3.登陆github，settings － Deploy keys  － add deploy key（把复制的SSH添加进去即可）</p>
<p><img src="http://cgcyg.img48.wal8.com/img48/564414_20170102112604/148376288144.png" alt=""></p>
<p>4.测试是否成功  </p>
<pre><code>$ ssh -T git@github.com 
</code></pre><p>提示：</p>
<pre><code>Hi whitescholars/whitescholars.github.io! You&apos;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><p>证明校验成功。</p>
<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>进入Hexo文件夹，在Dos命令窗输入：</p>
<pre><code>$ hexo init
</code></pre><p>这个过程稍微漫长一点，下载的文件如下图所示：</p>
<p><img src="http://cgcyg.img48.wal8.com/img48/564414_20170102112604/148376370505.png" alt=""></p>
<p>接着输入：</p>
<pre><code>$ hexo g # 生成
$ hexo s # 启动服务
</code></pre><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：<br><img src="http://cgcyg.img48.wal8.com/img48/564414_20170102112604/148376395967.png" alt=""></p>
<p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可看到内容：</p>
<p><img src="http://cgcyg.img48.wal8.com/img48/564414_20170102112604/148376511338.png" alt=""></p>
<p>至此一个简单的博客框架算是搭建完成。系统会默认生成一个Hello    World的文章。</p>
<h3 id="代码上传"><a href="#代码上传" class="headerlink" title="代码上传"></a>代码上传</h3><p>如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。<br>首先，ssh key肯定要配置好。<br>其次，配置<code>主配置文件_config.yml</code>中有关deploy的部分：</p>
<p>正确写法：</p>
<pre><code># Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy:
  type: git
  repository: git@github.com:whitescholars/whitescholars.github.io.git
  branch: master  
</code></pre><p>repository为对应仓库的地址。注意仓库地址有两种形式。一种是https，一种是SSH。此处应该使用SSH形式的地址。   </p>
<p>最后输入如下三条命令：</p>
<pre><code>$ hexo clean # 清理
$ hexo g  # 生成文件
$ hexo d  # 部署文件
</code></pre><p>部署完成后输入自己之前创建的git仓库地址就可以访问了，例如我的仓库名字是<a href="https://whitescholars.github.io" target="_blank" rel="external">whitescholars.github.io</a>,则输入<a href="https://whitescholars.github.io即可访问。" target="_blank" rel="external">https://whitescholars.github.io即可访问。</a></p>
<p>至此一个你已完成了真个博客的搭建。当然你可能或觉得自己不喜欢这个主题，没关系，我会在后面的博客中接着告诉大家如何安装和修改主题。</p>
<h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><h4 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h4><pre><code>hexo new &quot;postName&quot; #新建文章
hexo new page &quot;pageName&quot; #新建页面
hexo generate #生成静态页面至public目录
hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）
hexo deploy #部署到GitHub
hexo help  # 查看帮助
hexo version  #查看Hexo的版本
</code></pre><h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><pre><code>hexo n == hexo new
hexo g == hexo generate
hexo s == hexo server
hexo d == hexo deploy
</code></pre><h4 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h4><pre><code>hexo s -g #生成并本地预览
hexo d -g #生成并上传
</code></pre><hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;GitHub 是一个开源项目的托管网站，相信很多人都听过。在上面有很多高质量的项目代码，我们也可以把自己的项目代码托
    
    </summary>
    
      <category term="Github+Hexo建站系列" scheme="http://penglei.top/categories/Github-Hexo%E5%BB%BA%E7%AB%99%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Github" scheme="http://penglei.top/tags/Github/"/>
    
      <category term="Hexo" scheme="http://penglei.top/tags/Hexo/"/>
    
      <category term="Node.js" scheme="http://penglei.top/tags/Node-js/"/>
    
      <category term="NextT" scheme="http://penglei.top/tags/NextT/"/>
    
  </entry>
  
  <entry>
    <title>使用JSONObject.fromObject的时候出现“There is a cycle in the hierarchy”异常 的解决办法</title>
    <link href="http://penglei.top/2017/01/05/java_jsonobj_exceptio/"/>
    <id>http://penglei.top/2017/01/05/java_jsonobj_exceptio/</id>
    <published>2017-01-05T12:17:29.000Z</published>
    <updated>2017-01-07T05:15:29.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&ensp;&ensp;在使用JSONObject.fromObject的时候，出现“There is a cycle in the hierarchy”异常。意思是出现了死循环，也就是Model之间有循环包含关系.</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>使用setCycleDetectionStrategy防止自包含  </p>
<p>代码：  </p>
<pre><code>JsonConfig jsonConfig=new JsonConfig();
jsonConfig.setIgnoreDefaultExcludes(false); 
jsonConfig.setExcludes(new String[]{collection});//collection 即为移除的实体对象
JSONObject JsonObject = JSONObject.fromObject(object, jsonConfig);
</code></pre><p>依赖的包：  </p>
<pre><code>import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy
</code></pre><hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;在使用JSONObject.fromObject的时候，出现“There is a cycle in the hie
    
    </summary>
    
      <category term="Java" scheme="http://penglei.top/categories/Java/"/>
    
    
      <category term="There is a cycle in the hierarchy" scheme="http://penglei.top/tags/There-is-a-cycle-in-the-hierarchy/"/>
    
      <category term="json" scheme="http://penglei.top/tags/json/"/>
    
      <category term="JSONObject.fromObject" scheme="http://penglei.top/tags/JSONObject-fromObject/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch之java的基本操作一</title>
    <link href="http://penglei.top/2017/01/04/elasticSearch_course_1/"/>
    <id>http://penglei.top/2017/01/04/elasticSearch_course_1/</id>
    <published>2017-01-04T14:30:36.000Z</published>
    <updated>2017-01-07T05:16:18.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&ensp;&ensp;接触ElasticSearch已经有一段了。在这期间，遇到很多问题，但在最后自己的不断探索下解决了这些问题。看到网上或多或少的都有一些介绍ElasticSearch相关知识的文档，但个人觉得都不是很全面。因此就有了写ElasticSearch开发教程的想法，将学习到的技术经验分享出来，帮助更多需要的朋友，也希望借此认识同行的朋友，共同交流，共同进步！  </p>
<hr>
<h3 id="系列文章的总括"><a href="#系列文章的总括" class="headerlink" title="系列文章的总括"></a>系列文章的总括</h3><p>下面将对即将推出的ElasticSearch开发系列连载教程做简单的说明。教程主要是面向有一定Java编程基础的朋友，不打算从编程语言开始讲起，至于内容方面，大概会涉及到：<br>1.如何快速入手ElasticSearch搜索引擎技术。<br>2.ElasticSearch搜索引擎的安装。<br>3.常用的ElasticSearch查询语法以及示例。<br>4.java 操作es的基本范例。<br>5.代码结构以及开发中需要注意的事项。<br>当然，具体写出来的内容肯定不止这些，但一定会包含以上介绍的所有内容。  </p>
<h3 id="快速入手方法"><a href="#快速入手方法" class="headerlink" title="快速入手方法"></a>快速入手方法</h3><p>1.首先学习一下有关ElasticSearch的基本知识，简单的增删查找以及分片，并且对比一下ElasticSearch中一些名词与数据库中的一些名词的关系。  这里附上一张简单的对比关系：</p>
<blockquote>
<p>关系数据库(Relational DB) -库(Databases) -表(Tables) -行(Rows) -列(Columns)<br>Elasticsearch -索引(Indices) -类型(Types) -文档(Documents) -字段(Fields)  </p>
</blockquote>
<p>切记，如果你只是一个Java开发者，则刚开始没有必要研究很深很深的有关它的知识。这样你会越看越糊涂，根本不知道作者在说什么。这里推荐一个学习网址：<a href="http://www.learnes.net/getting_started/README.html" target="_blank" rel="external">http://www.learnes.net/getting_started/README.html</a>  </p>
<p>2.掌握了基本的增删查找后，就是开始搭建ElasticSearch-Java的开发环境，并且利用Java语言，实现对ElasticSeacrh的简单操作。在这个过程中，你慢慢了解ElasticSearch的相关特性。  </p>
<p>3.掌握了基本的知识后，接下来要做的事情，就是学习ElasticSearch的高级用法，并不断深入。  </p>
<p>废话不多说 开启我们的ElasticSearch之旅吧！</p>
<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;接触ElasticSearch已经有一段了。在这期间，遇到很多问题，但在最后自己的不断探索下解决了这些问题。看到网上
    
    </summary>
    
      <category term="ElastciSearch系列" scheme="http://penglei.top/categories/ElastciSearch%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="ElasticSearch" scheme="http://penglei.top/tags/ElasticSearch/"/>
    
      <category term="Java" scheme="http://penglei.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>懒加载session 无法打开 no session or session was closed 解决办法（完美解决）</title>
    <link href="http://penglei.top/2017/01/03/java_session_problem/"/>
    <id>http://penglei.top/2017/01/03/java_session_problem/</id>
    <published>2017-01-03T15:10:29.000Z</published>
    <updated>2017-01-07T05:13:30.969Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&ensp;&ensp;首先说明一下，hibernate的延迟加载特性(lazy)。所谓的延迟加载就是当真正需要查询数据时才执行数据加载操作。因为hibernate当中支持实体对象，外键会与实体对象关联起来。如果没有这一特性，当查询某一个含有外键的实体对象时，hibernate会把其他实体对象的数据都查询出来。简单的来说，当你想查询某个对象时，实际上调用了多条查询语句。有了延迟加载特性，就避免了这种情况的发生，当你真正的使用get另外一个实体对象时，才再执行下面一条查询语句。<br>&ensp;&ensp;&ensp;&ensp;但有些时候，这个特性却会给我们应用中带来一些问题。这个问题相信大家并不陌生了，hibernate的延迟加载(lazy)特性的确不错的优点，如果没了这个特性，我相信大家在处理一些外键的对象时会头大起来，因为效率十分的低。甚至很多人都觉得使用jdbc要比hibernate要高效甚至方便得多，而迫使不去使用hibernate。<br>&ensp;&ensp;&ensp;&ensp;我想说，没错，使用jdbc在效率上的确可能要快许多，但差距也不会太大的，因为hibernate本身就支持多种查询方式，SQL、HQL、 DetachedCriteria等。而相反的，hibernate在维护性上比jdbc强很多，因为是实体对象的关系。我相信如果您使用过jdbc来实现注册功能的话，会深有体会。</p>
<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>&ensp;&ensp;&ensp;&ensp;提示session已关闭(no session or session was closed) 触发这个问题的原因在于，hibernate在查询操作完毕的时候会自动的把session关闭掉，为了降低使用的资源。但问题也这样产生了，不要忘了之前所说的hibernate特性，此时再调用get实体方法的时候就会有可能出现这个错误。因为session已经关闭而不能继续执行查询了。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="1-关闭延迟加载特性。"><a href="#1-关闭延迟加载特性。" class="headerlink" title="1. 关闭延迟加载特性。"></a>1. 关闭延迟加载特性。</h4><p>&ensp;&ensp;&ensp;&ensp;操作起来比较简单，因为hibernate的延迟加载特性是在hbm配置里面可控制的。默认lazy=”true”，在many-to-one中添加属性lazy=”false”，就不详细叙述了。</p>
<pre><code>&lt;many-to-one name=&quot;category&quot; lazy=&quot;false&quot; class=&quot;com.penglei.onlineshop.category.vo.Category&quot; column=&quot;cid&quot;&gt;&lt;/many-to-one&gt;
</code></pre><p>但使用这个解决办法带来的隐患是十分大的。<br>首先，出现no session or session was closed就证明了您已经在使用外键关联表，如果去掉延迟加载的话，则表示每次查询的开销都会变得十分的大，如果关联表越多，后果也可以想象得到。所以不建议使用这个方法解决。</p>
<h4 id="2-在session关闭之前把我们想要查询的数据先获取了。"><a href="#2-在session关闭之前把我们想要查询的数据先获取了。" class="headerlink" title="2. 在session关闭之前把我们想要查询的数据先获取了。"></a>2. 在session关闭之前把我们想要查询的数据先获取了。</h4><p>&ensp;&ensp;&ensp;&ensp;然而有时会出现一种情况就是使用第一种方法并不能解决问题。这时我们需要了解一下session什么时候关闭，也就是它的生命周期。通常情况下hibernate会在查询数据关闭session，而使用getHibernateTemplate().get方法查询后会延迟关闭的时间。会在事务结束后才关闭。<br>&ensp;&ensp;&ensp;&ensp;使用拦截器(Interceptor)或过滤器(Filter)控制session。<br>&ensp;&ensp;&ensp;&ensp;spring为解决hibernate这一特性提供的解决方案，可以有效的控制session生命周期。  在web.xml添加一个拦截器：</p>
<pre><code>&lt;!-- 用于解决懒加载的问题 --&gt;
&lt;filter&gt;
&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;
&lt;filter-class&gt;org.springframework.orm.hibernate3.support.OpenSessionInViewFilter&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;
&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre><p>&ensp;&ensp;&ensp;&ensp;决懒加载的问题，但是对于很多新手来说，有很多疑问，为什么把这段代码粘贴进去了好像还是没有什么用。<br>   &ensp;&ensp;&ensp;&ensp;所以需要注意的是这段代码一定要放在web.xml文件的最开始，如此方可解决问题。  </p>
<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;首先说明一下，hibernate的延迟加载特性(lazy)。所谓的延迟加载就是当真正需要查询数据时才执行数据加载操作
    
    </summary>
    
      <category term="Java" scheme="http://penglei.top/categories/Java/"/>
    
    
      <category term="no session or session was closed" scheme="http://penglei.top/tags/no-session-or-session-was-closed/"/>
    
      <category term="懒加载" scheme="http://penglei.top/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="Hibernate" scheme="http://penglei.top/tags/Hibernate/"/>
    
      <category term="spring" scheme="http://penglei.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>XStream将java对象转换为xml时，对象字段中的下划线&quot;_&quot;，转换后变成了两个的解决办法</title>
    <link href="http://penglei.top/2017/01/02/java_xstream_problem/"/>
    <id>http://penglei.top/2017/01/02/java_xstream_problem/</id>
    <published>2017-01-02T03:50:30.000Z</published>
    <updated>2017-01-07T05:15:06.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题产生原因及解决办法"><a href="#问题产生原因及解决办法" class="headerlink" title="问题产生原因及解决办法"></a>问题产生原因及解决办法</h3><p>&ensp;&ensp;在前几天的一个项目中，由于数据库字段的命名原因 其中有两项：一项叫做”市场价格”一项叫做”商店价格” 为了便于区分，遂分别将其命名为market_price和shop_price.对应的实体类命名于此相似。可是在后台使用xstream将数据读出转换为对xml对象时，前台使用extjs的ajax请求，所有其他的属性在前台都可以被解析，唯独 此二者不可解析，仔细检查了一遍也没有发现是什么原因。后来将生产的xml文件粘贴到notepad 放大后才发现原有得market_price，已经变成了market__price 知道了为什么解析不了的原因。于是在网上搜索找到了一个可行的办法：通过转换过滤来解决这个问题。具体解决方法如下：</p>
<pre><code>String xml = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;\n&quot;    + sm.toXML(results);
xml=xml.replace(&quot;__&quot;, &quot;_&quot;);  
</code></pre><hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题产生原因及解决办法&quot;&gt;&lt;a href=&quot;#问题产生原因及解决办法&quot; class=&quot;headerlink&quot; title=&quot;问题产生原因及解决办法&quot;&gt;&lt;/a&gt;问题产生原因及解决办法&lt;/h3&gt;&lt;p&gt;&amp;ensp;&amp;ensp;在前几天的一个项目中，由于数据库字段的命名原
    
    </summary>
    
      <category term="Java" scheme="http://penglei.top/categories/Java/"/>
    
    
      <category term="XStream" scheme="http://penglei.top/tags/XStream/"/>
    
      <category term="下划线" scheme="http://penglei.top/tags/%E4%B8%8B%E5%88%92%E7%BA%BF/"/>
    
      <category term="bug" scheme="http://penglei.top/tags/bug/"/>
    
      <category term="xml" scheme="http://penglei.top/tags/xml/"/>
    
  </entry>
  
</feed>
