<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用JSONObject.fromObject的时候出现“There is a cycle in the hierarchy”异常 的解决办法]]></title>
      <url>http://penglei.top/2017/01/05/java_jsonobj_exceptio/</url>
      <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&ensp;&ensp;在使用JSONObject.fromObject的时候，出现“There is a cycle in the hierarchy”异常。意思是出现了死循环，也就是Model之间有循环包含关系.</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>使用setCycleDetectionStrategy防止自包含  </p>
<p>代码：  </p>
<pre><code>JsonConfig jsonConfig=new JsonConfig();
jsonConfig.setIgnoreDefaultExcludes(false); 
jsonConfig.setExcludes(new String[]{collection});//collection 即为移除的实体对象
JSONObject JsonObject = JSONObject.fromObject(object, jsonConfig);
</code></pre><p>依赖的包：  </p>
<pre><code>import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy
</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch之java的基本操作一]]></title>
      <url>http://penglei.top/2017/01/04/elasticSearch_course_1/</url>
      <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&ensp;&ensp;接触ElasticSearch已经有一段了。在这期间，遇到很多问题，但在最后自己的不断探索下解决了这些问题。看到网上或多或少的都有一些介绍ElasticSearch相关知识的文档，但个人觉得都不是很全面。因此就有了写ElasticSearch开发教程的想法，将学习到的技术经验分享出来，帮助更多需要的朋友，也希望借此认识同行的朋友，共同交流，共同进步！  </p>
<hr>
<h3 id="系列文章的总括"><a href="#系列文章的总括" class="headerlink" title="系列文章的总括"></a>系列文章的总括</h3><p>下面将对即将推出的ElasticSearch开发系列连载教程做简单的说明。教程主要是面向有一定Java编程基础的朋友，不打算从编程语言开始讲起，至于内容方面，大概会涉及到：<br>1.如何快速入手ElasticSearch搜索引擎技术。<br>2.ElasticSearch搜索引擎的安装。<br>3.常用的ElasticSearch查询语法以及示例。<br>4.java 操作es的基本范例。<br>5.代码结构以及开发中需要注意的事项。<br>当然，具体写出来的内容肯定不止这些，但一定会包含以上介绍的所有内容。  </p>
<h3 id="快速入手方法"><a href="#快速入手方法" class="headerlink" title="快速入手方法"></a>快速入手方法</h3><p>1.首先学习一下有关ElasticSearch的基本知识，简单的增删查找以及分片，并且对比一下ElasticSearch中一些名词与数据库中的一些名词的关系。  这里附上一张简单的对比关系：</p>
<blockquote>
<p>关系数据库(Relational DB) -库(Databases) -表(Tables) -行(Rows) -列(Columns)<br>Elasticsearch -索引(Indices) -类型(Types) -文档(Documents) -字段(Fields)  </p>
</blockquote>
<p>切记，如果你只是一个Java开发者，则刚开始没有必要研究很深很深的有关它的知识。这样你会越看越糊涂，根本不知道作者在说什么。这里推荐一个学习网址：<a href="http://www.learnes.net/getting_started/README.html" target="_blank" rel="external">http://www.learnes.net/getting_started/README.html</a>  </p>
<p>2.掌握了基本的增删查找后，就是开始搭建ElasticSearch-Java的开发环境，并且利用Java语言，实现对ElasticSeacrh的简单操作。在这个过程中，你慢慢了解ElasticSearch的相关特性。  </p>
<p>3.掌握了基本的知识后，接下来要做的事情，就是学习ElasticSearch的高级用法，并不断深入。  </p>
<p>废话不多说 开启我们的ElasticSearch之旅吧！</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[懒加载session 无法打开 no session or session was closed 解决办法（完美解决）]]></title>
      <url>http://penglei.top/2017/01/03/java_session_problem/</url>
      <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>&ensp;&ensp;首先说明一下，hibernate的延迟加载特性(lazy)。所谓的延迟加载就是当真正需要查询数据时才执行数据加载操作。因为hibernate当中支持实体对象，外键会与实体对象关联起来。如果没有这一特性，当查询某一个含有外键的实体对象时，hibernate会把其他实体对象的数据都查询出来。简单的来说，当你想查询某个对象时，实际上调用了多条查询语句。有了延迟加载特性，就避免了这种情况的发生，当你真正的使用get另外一个实体对象时，才再执行下面一条查询语句。<br>&ensp;&ensp;&ensp;&ensp;但有些时候，这个特性却会给我们应用中带来一些问题。这个问题相信大家并不陌生了，hibernate的延迟加载(lazy)特性的确不错的优点，如果没了这个特性，我相信大家在处理一些外键的对象时会头大起来，因为效率十分的低。甚至很多人都觉得使用jdbc要比hibernate要高效甚至方便得多，而迫使不去使用hibernate。<br>&ensp;&ensp;&ensp;&ensp;我想说，没错，使用jdbc在效率上的确可能要快许多，但差距也不会太大的，因为hibernate本身就支持多种查询方式，SQL、HQL、 DetachedCriteria等。而相反的，hibernate在维护性上比jdbc强很多，因为是实体对象的关系。我相信如果您使用过jdbc来实现注册功能的话，会深有体会。</p>
<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>&ensp;&ensp;&ensp;&ensp;提示session已关闭(no session or session was closed) 触发这个问题的原因在于，hibernate在查询操作完毕的时候会自动的把session关闭掉，为了降低使用的资源。但问题也这样产生了，不要忘了之前所说的hibernate特性，此时再调用get实体方法的时候就会有可能出现这个错误。因为session已经关闭而不能继续执行查询了。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="1-关闭延迟加载特性。"><a href="#1-关闭延迟加载特性。" class="headerlink" title="1. 关闭延迟加载特性。"></a>1. 关闭延迟加载特性。</h4><p>&ensp;&ensp;&ensp;&ensp;操作起来比较简单，因为hibernate的延迟加载特性是在hbm配置里面可控制的。默认lazy=”true”，在many-to-one中添加属性lazy=”false”，就不详细叙述了。</p>
<pre><code>&lt;many-to-one name=&quot;category&quot; lazy=&quot;false&quot; class=&quot;com.penglei.onlineshop.category.vo.Category&quot; column=&quot;cid&quot;&gt;&lt;/many-to-one&gt;
</code></pre><p>但使用这个解决办法带来的隐患是十分大的。<br>首先，出现no session or session was closed就证明了您已经在使用外键关联表，如果去掉延迟加载的话，则表示每次查询的开销都会变得十分的大，如果关联表越多，后果也可以想象得到。所以不建议使用这个方法解决。</p>
<h4 id="2-在session关闭之前把我们想要查询的数据先获取了。"><a href="#2-在session关闭之前把我们想要查询的数据先获取了。" class="headerlink" title="2. 在session关闭之前把我们想要查询的数据先获取了。"></a>2. 在session关闭之前把我们想要查询的数据先获取了。</h4><p>&ensp;&ensp;&ensp;&ensp;然而有时会出现一种情况就是使用第一种方法并不能解决问题。这时我们需要了解一下session什么时候关闭，也就是它的生命周期。通常情况下hibernate会在查询数据关闭session，而使用getHibernateTemplate().get方法查询后会延迟关闭的时间。会在事务结束后才关闭。<br>&ensp;&ensp;&ensp;&ensp;使用拦截器(Interceptor)或过滤器(Filter)控制session。<br>&ensp;&ensp;&ensp;&ensp;spring为解决hibernate这一特性提供的解决方案，可以有效的控制session生命周期。  在web.xml添加一个拦截器：</p>
<pre><code>&lt;!-- 用于解决懒加载的问题 --&gt;
&lt;filter&gt;
&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;
&lt;filter-class&gt;org.springframework.orm.hibernate3.support.OpenSessionInViewFilter&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
&lt;filter-name&gt;OpenSessionInViewFilter&lt;/filter-name&gt;
&lt;url-pattern&gt;*.action&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre><p>&ensp;&ensp;&ensp;&ensp;决懒加载的问题，但是对于很多新手来说，有很多疑问，为什么把这段代码粘贴进去了好像还是没有什么用。<br>   &ensp;&ensp;&ensp;&ensp;所以需要注意的是这段代码一定要放在web.xml文件的最开始，如此方可解决问题。  </p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java中servlet的各种路径]]></title>
      <url>http://penglei.top/2017/01/02/java_servlet_course/</url>
      <content type="html"><![CDATA[<h4 id="1-web-xml中路径，（叫它Servlet路径！）"><a href="#1-web-xml中路径，（叫它Servlet路径！）" class="headerlink" title="1. web.xml中路径，（叫它Servlet路径！）"></a>1. web.xml中<url-pattern>路径，（叫它Servlet路径！）</url-pattern></h4><p>要么以“*”开关，要么为“/”开头</p>
<h4 id="2转发和包含路径"><a href="#2转发和包含路径" class="headerlink" title="2转发和包含路径"></a>2转发和包含路径</h4><p>以“/”开头：相对当前项目路径，例如：<a href="http://localhost:8080/项目名/request.getRequestdispacher(&quot;/BServlet&quot;).for...(" target="_blank" rel="external">http://localhost:8080/项目名/request.getRequestdispacher(&quot;/BServlet&quot;).for...(</a>)　  </p>
<p>不以“/”开头：相对当前Servlet路径。 request.getRequestdispacher(“/BServlet”).for…();假如当前Servlet是：http://<br>localhost:8080/项目名/servlet/AServlet就是<a href="http://localhost:8080/项目名/servlet/BServlet" target="_blank" rel="external">http://localhost:8080/项目名/servlet/BServlet</a> 重定向路径（客户端路径）  </p>
<p>以“/”开头：相对当前主机，例如：<a href="http://localhost:8080/，" target="_blank" rel="external">http://localhost:8080/，</a>　所以需要自己手动添加项目名，例如；response.sendRedirect(“/day10_1/Bservlet”);</p>
<h4 id="3-页面中超链接和表单路径"><a href="#3-页面中超链接和表单路径" class="headerlink" title="3.页面中超链接和表单路径"></a>3.页面中超链接和表单路径</h4><p>与重定向相同，都是客户端路径！需要添加项目名</p>
<p><form action="/day10_1/AServlet"><br><a href="/day10_/AServlet"><br><a href="AServlet">，如果不以“/”开头，那么相对当前页面所在路径。如果是http://localhost:8080/day10_1/html/form.html。　即：http://localhost:8080/day10_1/html/ASevlet建立使用以“/”开头的路径，即绝对路径！</a></a></form></p>
<h4 id="4-ServletContext获取资源路径"><a href="#4-ServletContext获取资源路径" class="headerlink" title="4. ServletContext获取资源路径"></a>4. ServletContext获取资源路径</h4><p>　相对当前项目目录，即当然index.jsp所在目录</p>
<h4 id="5-ClassLoader获取资源路径"><a href="#5-ClassLoader获取资源路径" class="headerlink" title="5. ClassLoader获取资源路径"></a>5. ClassLoader获取资源路径</h4><p>相对classes目录</p>
<h4 id="6-Class获取资源路径"><a href="#6-Class获取资源路径" class="headerlink" title="6. Class获取资源路径"></a>6. Class获取资源路径</h4><p>以“/”开头相对classes目录<br>不以“/”开头相对当前.class文件所在目录。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[XStream将java对象转换为xml时，对象字段中的下划线"_"，转换后变成了两个的解决办法]]></title>
      <url>http://penglei.top/2017/01/02/java_xstream_problem/</url>
      <content type="html"><![CDATA[<h3 id="问题产生原因及解决办法"><a href="#问题产生原因及解决办法" class="headerlink" title="问题产生原因及解决办法"></a>问题产生原因及解决办法</h3><p>&ensp;&ensp;在前几天的一个项目中，由于数据库字段的命名原因 其中有两项：一项叫做”市场价格”一项叫做”商店价格” 为了便于区分，遂分别将其命名为market_price和shop_price.对应的实体类命名于此相似。可是在后台使用xstream将数据读出转换为对xml对象时，前台使用extjs的ajax请求，所有其他的属性在前台都可以被解析，唯独 此二者不可解析，仔细检查了一遍也没有发现是什么原因。后来将生产的xml文件粘贴到notepad 放大后才发现原有得market_price，已经变成了market__price 知道了为什么解析不了的原因。于是在网上搜索找到了一个可行的办法：通过转换过滤来解决这个问题。具体解决方法如下：</p>
<pre><code>String xml = &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;\n&quot;    + sm.toXML(results);
xml=xml.replace(&quot;__&quot;, &quot;_&quot;);  
</code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>如果你还需要了解更多技术文章信息，请继续关注<em><a href="HTTP://PENGLEI.TOP">白衣秀才</a></em>的博客</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
